import unittest
import os
import shutil
import pandas as pd
from main import InventoryManager, print_error, print_success, print_info


class TestInventoryManager(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        """Create a temporary test folder and mock CSV data."""
        cls.test_folder = "test_data"
        os.makedirs(cls.test_folder, exist_ok=True)

        # Create mock inventory CSV files
        data = {
            'product_id': [1, 2, 3, 4, 5],
            'category': ['Electronics', 'Electronics', 'Groceries', 'Furniture', 'Furniture'],
            'product_name': ['Smartphone', 'Laptop', 'Apples', 'Chair', 'Table'],
            'quantity': [100, 50, 200, 75, 20],
            'unit_price': [299.99, 999.99, 0.99, 49.99, 149.99]
        }
        cls.mock_inventory = pd.DataFrame(data)
        cls.csv_path = os.path.join(cls.test_folder, "inventory.csv")
        cls.mock_inventory.to_csv(cls.csv_path, index=False)

    @classmethod
    def tearDownClass(cls):
        """Clean up the temporary test folder."""
        shutil.rmtree(cls.test_folder, ignore_errors=True)

    def setUp(self):
        """Initialize the InventoryManager for each test."""
        self.manager = InventoryManager()

    def test_load_valid_folder(self):
        """Test loading valid CSV files from a folder."""
        with self.assertLogs(level="INFO") as log:
            self.manager.do_load(self.test_folder)
            self.assertFalse(self.manager.inventory.empty)
            self.assertEqual(len(self.manager.inventory), len(self.mock_inventory))
            self.assertIn("Loaded: inventory.csv", log.output[0])

    def test_load_invalid_folder(self):
        """Test loading from an invalid folder."""
        with self.assertLogs(level="ERROR") as log:
            self.manager.do_load("invalid_folder")
            self.assertIn("Folder not found.", log.output[0])

    def test_search_existing_product(self):
        """Test searching for an existing product."""
        self.manager.inventory = self.mock_inventory
        with self.assertLogs(level="INFO") as log:
            self.manager.do_search("category=Electronics")
            self.assertIn("Smartphone", log.output[0])
            self.assertIn("Laptop", log.output[0])

    def test_search_non_existing_product(self):
        """Test searching for a non-existing product."""
        self.manager.inventory = self.mock_inventory
        with self.assertLogs(level="INFO") as log:
            self.manager.do_search("category=Clothing")
            self.assertIn("No results found.", log.output[0])

    def test_summary_report(self):
        """Test generating a summary report."""
        self.manager.inventory = self.mock_inventory
        summary_file = "summary_test.csv"
        with self.assertLogs(level="INFO") as log:
            self.manager.do_summary(summary_file)
            self.assertIn("Electronics", log.output[0])
            self.assertTrue(os.path.exists(summary_file))
        os.remove(summary_file)  # Clean up generated file

    def test_show(self):
        """Test displaying the first few rows of the inventory."""
        self.manager.inventory = self.mock_inventory
        with self.assertLogs(level="INFO") as log:
            self.manager.do_show("2")
            self.assertIn("Smartphone", log.output[0])
            self.assertIn("Laptop", log.output[0])

    def test_show_empty_inventory(self):
        """Test displaying rows when inventory is empty."""
        self.manager.inventory = pd.DataFrame()
        with self.assertLogs(level="ERROR") as log:
            self.manager.do_show("5")
            self.assertIn("The database is empty. Load data first.", log.output[0])

    def test_exit(self):
        """Test exit command."""
        result = self.manager.do_exit("")
        self.assertTrue(result)


if __name__ == "__main__":
    unittest.main()
